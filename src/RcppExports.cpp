// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// add_diag_double
void add_diag_double(arma::mat& x, double epsilon);
RcppExport SEXP dmisc_add_diag_double(SEXP xSEXP, SEXP epsilonSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type epsilon(epsilonSEXP);
    add_diag_double(x, epsilon);
    return R_NilValue;
END_RCPP
}
// add_diag_double_vec
void add_diag_double_vec(arma::mat& x, arma::vec& epsilon);
RcppExport SEXP dmisc_add_diag_double_vec(SEXP xSEXP, SEXP epsilonSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type epsilon(epsilonSEXP);
    add_diag_double_vec(x, epsilon);
    return R_NilValue;
END_RCPP
}
// add_diag_int
void add_diag_int(arma::imat& x, int epsilon);
RcppExport SEXP dmisc_add_diag_int(SEXP xSEXP, SEXP epsilonSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::imat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type epsilon(epsilonSEXP);
    add_diag_int(x, epsilon);
    return R_NilValue;
END_RCPP
}
// add_diag_int_vec
void add_diag_int_vec(arma::imat& x, arma::ivec& epsilon);
RcppExport SEXP dmisc_add_diag_int_vec(SEXP xSEXP, SEXP epsilonSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::imat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::ivec& >::type epsilon(epsilonSEXP);
    add_diag_int_vec(x, epsilon);
    return R_NilValue;
END_RCPP
}
// col_scale_inplace
void col_scale_inplace(arma::mat& x, const arma::vec& center, const arma::vec& scale);
RcppExport SEXP dmisc_col_scale_inplace(SEXP xSEXP, SEXP centerSEXP, SEXP scaleSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type center(centerSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type scale(scaleSEXP);
    col_scale_inplace(x, center, scale);
    return R_NilValue;
END_RCPP
}
// col_scale_copy
arma::mat col_scale_copy(const arma::mat& x, const arma::vec& center, const arma::vec& scale);
RcppExport SEXP dmisc_col_scale_copy(SEXP xSEXP, SEXP centerSEXP, SEXP scaleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type center(centerSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type scale(scaleSEXP);
    rcpp_result_gen = Rcpp::wrap(col_scale_copy(x, center, scale));
    return rcpp_result_gen;
END_RCPP
}
// match_dbl_cpp
IntegerVector match_dbl_cpp(NumericVector x, NumericVector table, int nomatch, double tolerance);
RcppExport SEXP dmisc_match_dbl_cpp(SEXP xSEXP, SEXP tableSEXP, SEXP nomatchSEXP, SEXP toleranceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type table(tableSEXP);
    Rcpp::traits::input_parameter< int >::type nomatch(nomatchSEXP);
    Rcpp::traits::input_parameter< double >::type tolerance(toleranceSEXP);
    rcpp_result_gen = Rcpp::wrap(match_dbl_cpp(x, table, nomatch, tolerance));
    return rcpp_result_gen;
END_RCPP
}
// prob_recomb
Rcpp::NumericMatrix prob_recomb(const Rcpp::NumericVector& x);
RcppExport SEXP dmisc_prob_recomb(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(prob_recomb(x));
    return rcpp_result_gen;
END_RCPP
}
// segr_var
double segr_var(const Rcpp::NumericVector& pat, const Rcpp::NumericVector& mat, const Rcpp::NumericVector& pos, const Rcpp::NumericVector& p, const Rcpp::NumericVector& alpha);
RcppExport SEXP dmisc_segr_var(SEXP patSEXP, SEXP matSEXP, SEXP posSEXP, SEXP pSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type pat(patSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type mat(matSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type pos(posSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type p(pSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(segr_var(pat, mat, pos, p, alpha));
    return rcpp_result_gen;
END_RCPP
}
// nth_partial_sort
NumericVector nth_partial_sort(NumericVector x, int nth, bool increasing);
RcppExport SEXP dmisc_nth_partial_sort(SEXP xSEXP, SEXP nthSEXP, SEXP increasingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type nth(nthSEXP);
    Rcpp::traits::input_parameter< bool >::type increasing(increasingSEXP);
    rcpp_result_gen = Rcpp::wrap(nth_partial_sort(x, nth, increasing));
    return rcpp_result_gen;
END_RCPP
}
// inv_sympd
arma::mat inv_sympd(const arma::mat& A);
RcppExport SEXP dmisc_inv_sympd(SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(inv_sympd(A));
    return rcpp_result_gen;
END_RCPP
}
// solve_mme
arma::mat solve_mme(const arma::vec& y, const arma::mat& A, const double lambda);
RcppExport SEXP dmisc_solve_mme(SEXP ySEXP, SEXP ASEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(solve_mme(y, A, lambda));
    return rcpp_result_gen;
END_RCPP
}
// solve_sie
Rcpp::List solve_sie(const arma::vec& y, const arma::mat& A, const double lambda);
RcppExport SEXP dmisc_solve_sie(SEXP ySEXP, SEXP ASEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(solve_sie(y, A, lambda));
    return rcpp_result_gen;
END_RCPP
}
// stl_partial_sort
NumericVector stl_partial_sort(NumericVector x, int n, bool increasing);
RcppExport SEXP dmisc_stl_partial_sort(SEXP xSEXP, SEXP nSEXP, SEXP increasingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< bool >::type increasing(increasingSEXP);
    rcpp_result_gen = Rcpp::wrap(stl_partial_sort(x, n, increasing));
    return rcpp_result_gen;
END_RCPP
}
// routine
double routine(const std::vector<std::string>& vec);
RcppExport SEXP dmisc_routine(SEXP vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type vec(vecSEXP);
    rcpp_result_gen = Rcpp::wrap(routine(vec));
    return rcpp_result_gen;
END_RCPP
}
// string_collapse
std::vector<std::string> string_collapse(const Rcpp::DataFrame& data);
RcppExport SEXP dmisc_string_collapse(SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::DataFrame& >::type data(dataSEXP);
    rcpp_result_gen = Rcpp::wrap(string_collapse(data));
    return rcpp_result_gen;
END_RCPP
}
// topN
NumericVector topN(NumericMatrix x, int nth);
RcppExport SEXP dmisc_topN(SEXP xSEXP, SEXP nthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type nth(nthSEXP);
    rcpp_result_gen = Rcpp::wrap(topN(x, nth));
    return rcpp_result_gen;
END_RCPP
}
